name: Generate KiCad Documentation
on:
  push:
    branches: [ doc_workflow ]
  workflow_dispatch:

jobs:
  generate-kicad-outputs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper branch management

      # Set up Docker Buildx with proper cache location
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Create Docker cache directory
      - name: Create cache directory
        run: |
          mkdir -p /tmp/.buildx-cache
          chmod -R 777 /tmp/.buildx-cache

      # Cache Docker layers with proper path
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Find KiCad project files
        id: find-files
        run: |
          # Find all KiCad project files in the repository
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract project directory and name
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          # Find matching schematic and PCB files
          SCHEMATIC_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_sch" | head -n 1)
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          # Output the results
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Create and set permissions on output directories
        run: |
          mkdir -p docs/schematics docs/pictures
          chmod -R 777 docs

      # Extract configuration values once
      - name: Extract KiCad configuration
        id: kicad-config
        if: steps.find-files.outputs.pcb_found == 'true'
        run: |
          # Set default values
          echo "side_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "side_view_rotate=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "side_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "top_view_zoom_factor=1.0" >> $GITHUB_OUTPUT

          
          # Extract parameters from config file if it exists
          if [ -f ".github/kicad-config.yml" ]; then
            echo "Found configuration file"
            
            # Extract zoom factor
            SIDE_VIEW_ZOOM_FACTOR=$(grep 'side_view_zoom_factor:' .github/kicad-config.yml | sed 's/side_view_zoom_factor: *//')
            if [ ! -z "$SIDE_VIEW_ZOOM_FACTOR" ]; then
              echo "side_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            
            # Extract zoom factor
            TOP_VIEW_ZOOM_FACTOR=$(grep 'top_view_zoom_factor:' .github/kicad-config.yml | sed 's/top_view_zoom_factor: *//')
            if [ ! -z "$TOP_VIEW_ZOOM_FACTOR" ]; then
              echo "top_view_zoom_factor=$TOP_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            
            # Extract rotate values - preserve quotes
            SIDE_VIEW_ROTATE=$(grep 'side_view_rotate:' .github/kicad-config.yml | sed 's/side_view_rotate: *//')
            if [ ! -z "$SIDE_VIEW_ROTATE" ]; then
              echo "side_view_rotate=$SIDE_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            
            # Extract pan values - preserve quotes
            SIDE_VIEW_PAN=$(grep 'side_view_pan:' .github/kicad-config.yml | sed 's/side_view_pan: *//')
            if [ ! -z "$SIDE_VIEW_PAN" ]; then
              echo "side_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi
          fi

      # Pull Docker image before using it to ensure cache is properly used
      - name: Pull KiCad Docker image
        if: steps.find-files.outputs.project_found == 'true'
        run: docker pull ionutms/kicad_9:V1.0

      # Combined KiCad operations - run all tasks in a single container
      - name: Generate KiCad outputs
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          # Create a temporary directory for shared files
          mkdir -p /tmp/kicad_outputs/schematics /tmp/kicad_outputs/pictures
          
          # Run all KiCad operations in a single container
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.0 \
            bash -c "set -e && \
              # Create necessary directories
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors \
              /tmp/3d_models && \
              
              # Set environment variables
              export HOME=/tmp/home && \
              
              # Copy 3D models
              cp -r /usr/share/3D_Models_Vault/* /tmp/3d_models/ && \
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3d_models/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \
              
              # Setup Gruvbox theme if schematic found
              if [ '${{ steps.find-files.outputs.schematic_found }}' == 'true' ]; then
                git clone --depth 1 https://github.com/AlexanderBrevig/kicad-gruvbox-theme.git /tmp/kicad-gruvbox-theme && \
                cp /tmp/kicad-gruvbox-theme/colors/Gruvbox.json /tmp/home/.local/share/kicad/9.0/3rdparty/colors/ && \
                
                # Generate PDF schematic
                kicad-cli sch export pdf \
                  --output '/tmp/schematic.pdf' \
                  '/kicad_project/${{ steps.find-files.outputs.schematic_file }}' \
                  -t gruvbox && \
                cp /tmp/schematic.pdf '/kicad_project/docs/schematics/${{ steps.find-files.outputs.project_name }}_schematic.pdf'
              fi && \
              
              # Generate PCB render top view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o /kicad_project/docs/pictures/${{ steps.find-files.outputs.project_name }}_top.png \
                  --background transparent \
                  --quality high \
                  --zoom ${{ steps.kicad-config.outputs.top_view_zoom_factor }}
              fi && \

              # Generate PCB render side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o /kicad_project/docs/pictures/${{ steps.find-files.outputs.project_name }}_side.png \
                  --background transparent \
                  --quality high \
                  --rotate ${{ steps.kicad-config.outputs.side_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.side_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.side_view_zoom_factor }}
              fi"

      # Cleanup Docker cache and temporary files
      - name: Cleanup after Docker operations
        if: always()
        run: |
          # Remove any dangling Docker images
          docker image prune -f
          
          # Clean up temporary directories
          rm -rf /tmp/kicad_outputs || true
          rm -rf /tmp/home || true
          
          # Move cache for next workflow run
          rm -rf /tmp/.buildx-cache-old || true
          mv /tmp/.buildx-cache /tmp/.buildx-cache-old || true
          mkdir -p /tmp/.buildx-cache

      - name: Check for generated files
        id: check-files
        run: |
          PDF_COUNT=$(find docs/schematics -type f -name "*.pdf" | wc -l || echo "0")
          PNG_COUNT=$(find docs/pictures -type f -name "*.png" | wc -l || echo "0")
          TOTAL_COUNT=$((PDF_COUNT + PNG_COUNT))

          echo "Found $PDF_COUNT PDF files and $PNG_COUNT PNG files"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "Files generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No files were generated, checking for errors..."
          fi

      - name: Upload outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kicad-outputs
          path: |
            docs/schematics/
            docs/pictures/
          retention-days: 1
          if-no-files-found: warn

      - name: Configure Git
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine default branch
        id: default-branch
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch is: $DEFAULT_BRANCH"

      - name: Commit and push changes
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          DEFAULT_BRANCH="${{ steps.default-branch.outputs.default_branch }}"
          
          # Check out default branch
          if git show-ref --verify --quiet refs/remotes/origin/$DEFAULT_BRANCH; then
            git fetch origin $DEFAULT_BRANCH
            git checkout $DEFAULT_BRANCH
          else
            git checkout -b $DEFAULT_BRANCH
          fi
          
          # Add the files
          git add docs/schematics docs/pictures
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes"
            git commit -m "Update KiCad documentation (schematics and PCB renders)"
            
            # Push with error handling
            echo "Pushing to $DEFAULT_BRANCH branch"
            git push origin $DEFAULT_BRANCH || git push -u origin $DEFAULT_BRANCH || git push -f origin $DEFAULT_BRANCH
          fi